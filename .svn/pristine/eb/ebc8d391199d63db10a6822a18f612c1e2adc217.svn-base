// Generated code from Butter Knife. Do not modify!
package com.uyou.copenaccount.ui;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.CallSuper;
import androidx.annotation.UiThread;
import androidx.recyclerview.widget.RecyclerView;
import butterknife.Unbinder;
import butterknife.internal.DebouncingOnClickListener;
import butterknife.internal.Utils;
import com.uyou.copenaccount.R;
import java.lang.CharSequence;
import java.lang.IllegalStateException;
import java.lang.Override;

public class PhoneRechargeActivity_ViewBinding implements Unbinder {
  private PhoneRechargeActivity target;

  private View view5c3;

  private TextWatcher view5c3TextWatcher;

  private View view5c2;

  @UiThread
  public PhoneRechargeActivity_ViewBinding(PhoneRechargeActivity target) {
    this(target, target.getWindow().getDecorView());
  }

  @UiThread
  public PhoneRechargeActivity_ViewBinding(final PhoneRechargeActivity target, View source) {
    this.target = target;

    View view;
    view = Utils.findRequiredView(source, R.id.pay_edit_phone, "field 'editPhone' and method 'onPhoneChange'");
    target.editPhone = Utils.castView(view, R.id.pay_edit_phone, "field 'editPhone'", EditText.class);
    view5c3 = view;
    view5c3TextWatcher = new TextWatcher() {
      @Override
      public void onTextChanged(CharSequence p0, int p1, int p2, int p3) {
        target.onPhoneChange(p0);
      }

      @Override
      public void beforeTextChanged(CharSequence p0, int p1, int p2, int p3) {
      }

      @Override
      public void afterTextChanged(Editable p0) {
      }
    };
    ((TextView) view).addTextChangedListener(view5c3TextWatcher);
    target.layoutRechargeItem = Utils.findRequiredViewAsType(source, R.id.pay_layout_container, "field 'layoutRechargeItem'", LinearLayout.class);
    target.txtSelectPrice = Utils.findRequiredViewAsType(source, R.id.pay_txt_select_price, "field 'txtSelectPrice'", TextView.class);
    target.txtRechargeTip = Utils.findRequiredViewAsType(source, R.id.pay_txt_recharge_tip, "field 'txtRechargeTip'", TextView.class);
    target.recyclerRecharge = Utils.findRequiredViewAsType(source, R.id.pay_recycler_recharge, "field 'recyclerRecharge'", RecyclerView.class);
    target.layoutIncome = Utils.findRequiredViewAsType(source, R.id.pay_layout_income, "field 'layoutIncome'", LinearLayout.class);
    target.txtIncomeAll = Utils.findRequiredViewAsType(source, R.id.pay_txt_income_all, "field 'txtIncomeAll'", TextView.class);
    target.txtIncomeToday = Utils.findRequiredViewAsType(source, R.id.pay_txt_income_today, "field 'txtIncomeToday'", TextView.class);
    target.txtIncomeYesterday = Utils.findRequiredViewAsType(source, R.id.pay_txt_income_yesterday, "field 'txtIncomeYesterday'", TextView.class);
    view = Utils.findRequiredView(source, R.id.pay_btn_recharge, "field 'btnRecharge' and method 'toRecharge'");
    target.btnRecharge = Utils.castView(view, R.id.pay_btn_recharge, "field 'btnRecharge'", Button.class);
    view5c2 = view;
    view.setOnClickListener(new DebouncingOnClickListener() {
      @Override
      public void doClick(View p0) {
        target.toRecharge();
      }
    });
  }

  @Override
  @CallSuper
  public void unbind() {
    PhoneRechargeActivity target = this.target;
    if (target == null) throw new IllegalStateException("Bindings already cleared.");
    this.target = null;

    target.editPhone = null;
    target.layoutRechargeItem = null;
    target.txtSelectPrice = null;
    target.txtRechargeTip = null;
    target.recyclerRecharge = null;
    target.layoutIncome = null;
    target.txtIncomeAll = null;
    target.txtIncomeToday = null;
    target.txtIncomeYesterday = null;
    target.btnRecharge = null;

    ((TextView) view5c3).removeTextChangedListener(view5c3TextWatcher);
    view5c3TextWatcher = null;
    view5c3 = null;
    view5c2.setOnClickListener(null);
    view5c2 = null;
  }
}
